Description: >
  Udacity Cloud DevOps Nanodegree/2020 - Marcos Antonio de Jesus Filho
  Deploy a High-Availability web app using CloudFormation
  Servers infrasctructure

Parameters:

  EnvironmentName:
      Description: Environment name that will be prefixed to resources names and identifiers
      Type: String

Resources:

  LBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: Security Group for the Load Balancer
        GroupName: !Sub "${EnvironmentName}-LBSecurityGroup"
        SecurityGroupEgress:
          - Description: Rule for listener and health check
            DestinationSecurityGroupId: !Ref ServersSecurityGroup
            FromPort: 80
            IpProtocol: tcp
            ToPort: 80
        SecurityGroupIngress: 
          - CidrIp: 0.0.0.0/0
            Description: HTTP Ingress Rule
            FromPort: 80
            IpProtocol: tcp
            ToPort: 80
        VpcId: 
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"

  ServersSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: Security Group for the Servers
        GroupName: !Sub "${EnvironmentName}-ServersSecurityGroup"
        SecurityGroupIngress: 
          - SourceSecurityGroupId: !Ref LBSecurityGroup  
            Description: HTTP Ingress Rule
            FromPort: 80
            IpProtocol: tcp
            ToPort: 80
        VpcId: 
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"

  BastionSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: Security Group for the Bastion Host
        GroupName: !Sub "${EnvironmentName}-BastionSecurityGroup"
        SecurityGroupEgress:
          - DestinationSecurityGroupId: !Ref ServersSecurityGroup
            Description: Allows SSH connection to our servers
            FromPort: 22
            IpProtocol: tcp
            ToPort: 22
        SecurityGroupIngress: 
          - CidrIp: 0.0.0.0/0
            Description: SSH Ingress Rule
            FromPort: 22
            IpProtocol: tcp
            ToPort: 22
        VpcId: 
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"

  S3ReadOnlyEC2:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument: 
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole' 
        Description: Allow EC2 Instances to Read S3 objects
        ManagedPolicyArns: 
          - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        RoleName: UdacityS3ReadOnlyEC2

  ProfileWithRolesForOurApp:
      Type: AWS::IAM::InstanceProfile
      Properties: 
        Roles:
          - UdacityS3ReadOnlyEC2

  BastionHost:
      Type: AWS::EC2::Instance
      Properties: 
        BlockDeviceMappings: 
          - DeviceName: /dev/sdk
            Ebs:
              VolumeSize: 10
        IamInstanceProfile: !Ref ProfileWithRolesForOurApp
        ImageId: ami-003634241a8fcdec0
        InstanceInitiatedShutdownBehavior: stop
        InstanceType: t2.micro
        KeyName: jumpbox-us-west-2
        NetworkInterfaces: 
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            GroupSet: 
              - !Ref LBSecurityGroup
            SubnetId: 
              Fn::ImportValue:
                !Sub "${EnvironmentName}-PublicSubnet1ID"
        Tags: 
          - Key: Name
            Value: !Sub "${EnvironmentName}-BastionHost"

  ServersAutoScalingLaunchConf:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties: 
        BlockDeviceMappings: 
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 10
        IamInstanceProfile: !Ref ProfileWithRolesForOurApp
        ImageId: ami-003634241a8fcdec0
        InstanceType: t2.micro
        SecurityGroups: 
          - !Ref ServersSecurityGroup
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            aws s3 cp s3://udacity-demo-1/udacity.zip .
            unzip -o udacity.zip

  ServersAutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties: 
        DesiredCapacity: 2
        LaunchConfigurationName: !Ref ServersAutoScalingLaunchConf
        MaxSize: 3
        MinSize: 2
        Tags: 
          - Key: Name
            Value: !Sub "${EnvironmentName}-ServerInstances"
        TargetGroupARNs: 
          - String
        VPCZoneIdentifier: 
          Fn::Split:
            - ','
            - Fn::ImportValue:
              !Sub "${EnvironmentName}-PRIVNETS"

  LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties: 
        SecurityGroups: 
          - !Ref LBSecurityGroup
        Subnets: 
          Fn::Split:
            - ','
            - Fn::ImportValue:
              !Sub "${EnvironmentName}-PUBNETS"
        Tags: 
          - Key: Name
            Value: !Sub "${EnvironmentName}-LoadBalancer"

  TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties: 
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckPort: 80
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        Tags: 
          - Key: Name
            Value: !Sub "${EnvironmentName}-LBTargetGroup"
        UnhealthyThresholdCount: 5
        VpcId: 
          Fn::ImportValue:
            !Sub "{EnvironmentName}-VPCID"
